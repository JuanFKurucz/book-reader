{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Book Reader Documentation","text":"<p>Book Reader is a command-line utility that converts PDF books into audiobooks using OpenAI's text-to-speech service. It handles the extraction of text from PDF files and generates high-quality audio files.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Convert PDF files to audiobooks with OpenAI's text-to-speech service</li> <li>Resume conversion from where you left off</li> <li>Process PDFs in batches to manage large books</li> <li>Control voice type and audio quality</li> <li>Concurrent processing for faster conversion</li> <li>Docker support for easy deployment</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.13.3 or higher</li> <li>An OpenAI API key with access to the TTS API</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation Guide: Learn how to install Book Reader</li> <li>Usage Guide: Discover how to use Book Reader effectively</li> <li>Configuration Guide: Customize Book Reader to your needs</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>This documentation is automatically deployed to GitHub Pages whenever changes are pushed to the main branch. You can access the latest version at:</p> <p>https://juanfkurucz.github.io/book-reader/</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>Book Reader works by:</p> <ol> <li>Reading the PDF file and extracting text content</li> <li>Processing the text to optimize for text-to-speech conversion</li> <li>Sending the processed text to OpenAI's TTS API</li> <li>Saving the resulting audio files to your specified output directory</li> </ol> <p>For large PDFs, Book Reader processes pages in batches and can resume from where it left off if the conversion is interrupted.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Book Reader was inspired by and built upon the valuable work of the following projects and developers:</p> <ul> <li>epub-to-audiobook by fairy-root - A Python script that converts EPUB books to audiobooks using OpenAI's TTS API</li> <li>bulletReader by facundop3 - An Electron tool designed to increase reading speed</li> </ul> <p>We extend our sincere gratitude to these developers for their contributions to the open-source community and for inspiring features and approaches in Book Reader.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request or open an issue on our GitHub repository.</p>"},{"location":"#book-reader","title":"Book Reader","text":"<p>Convert PDF files to audiobooks using OpenAI TTS with multiple voice and model options.</p>"},{"location":"#overview","title":"Overview","text":"<p>Book Reader is a Python CLI tool that allows you to convert PDF documents into high-quality audiobooks using OpenAI's Text-to-Speech (TTS) service. It offers a range of voices and model options to customize your listening experience.</p>"},{"location":"#features_1","title":"Features","text":"<ul> <li>Convert PDF documents to audiobook audio files</li> <li>Support for multiple OpenAI voices (Alloy, Echo, Fable, Onyx, Nova, and more)</li> <li>Configurable audio quality settings</li> <li>Resume capability for interrupted conversions</li> <li>Parallel processing for faster conversions</li> <li>Progress tracking</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Install the package\npip install book-reader\n\n# Convert a PDF to audiobook with default settings\nbook-reader convert path/to/your/document.pdf\n\n# Use a specific voice\nbook-reader convert path/to/your/document.pdf --voice nova\n\n# Use high quality audio\nbook-reader convert path/to/your/document.pdf --model high-quality\n</code></pre> <p>For more detailed usage instructions, see the Usage section.</p>"},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"configuration/","title":"Configuration Guide","text":"<p>Book Reader offers several ways to configure its behavior to suit your needs. This guide explains all available configuration options and methods.</p>"},{"location":"configuration/#configuration-methods","title":"Configuration Methods","text":"<p>Book Reader uses a cascading priority system for configuration:</p> <ol> <li>Command-line arguments (highest priority)</li> <li>Environment variables</li> <li>Configuration file</li> <li>Default values (lowest priority)</li> </ol>"},{"location":"configuration/#configuration-file","title":"Configuration File","text":"<p>Book Reader looks for a <code>config.yaml</code> file in these locations (in order):</p> <ol> <li>Current working directory</li> <li>User's home directory (<code>~/.config/book-reader/config.yaml</code>)</li> </ol>"},{"location":"configuration/#example-configuration-file","title":"Example Configuration File","text":"<pre><code># Default conversion settings\ndefault_output_dir: \"~/audiobooks\"\nbatch_size: 15\nconcurrent_tasks: 2\n\n# Audio settings\naudio:\n  voice: \"nova\"\n  model: \"tts-1\"\n  speed: 1.0\n  format: \"mp3\"\n\n# API settings\nopenai_api_key: \"your-api-key-here\"\n\n# Logging and display\nlog_level: \"info\"\ndisable_progress_bar: false\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>You can configure Book Reader using environment variables:</p> Environment Variable Description <code>OPENAI_API_KEY</code> Your OpenAI API key <code>BOOK_READER_VOICE</code> Default voice for TTS <code>BOOK_READER_MODEL</code> Default TTS model <code>BOOK_READER_BATCH_SIZE</code> Default batch size <code>BOOK_READER_OUTPUT_DIR</code> Default output directory <code>BOOK_READER_CONCURRENT_TASKS</code> Default number of concurrent tasks <code>BOOK_READER_LOG_LEVEL</code> Logging level (debug, info, warning, error) <code>BOOK_READER_DISABLE_PROGRESS</code> Set to \"true\" to disable progress bar"},{"location":"configuration/#command-line-arguments","title":"Command-Line Arguments","text":"<p>Command-line arguments always take precedence over other configuration methods:</p> <pre><code>book-reader convert document.pdf \\\n  --output-dir ~/audiobooks/my-book \\\n  --voice nova \\\n  --model tts-1-hd \\\n  --speed 1.1 \\\n  --batch-size 15 \\\n  --concurrent-tasks 3 \\\n  --verbose\n</code></pre>"},{"location":"configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"configuration/#general-options","title":"General Options","text":"Option Description Default Environment Variable <code>output-dir</code> Directory to save audio files Current directory <code>BOOK_READER_OUTPUT_DIR</code> <code>batch-size</code> Number of PDF pages to process in a batch 15 <code>BOOK_READER_BATCH_SIZE</code> <code>concurrent-tasks</code> Number of concurrent TTS tasks 2 <code>BOOK_READER_CONCURRENT_TASKS</code> <code>resume</code> Resume from last processed page False - <code>pages</code> Range of pages to process (e.g., \"5-10\") All pages - <code>verbose</code> Enable verbose logging False - <code>config</code> Path to config file - -"},{"location":"configuration/#audio-options","title":"Audio Options","text":"Option Description Default Environment Variable <code>voice</code> Voice to use for TTS \"nova\" <code>BOOK_READER_VOICE</code> <code>model</code> TTS model to use \"tts-1\" <code>BOOK_READER_MODEL</code> <code>speed</code> Speed factor for audio playback 1.0 <code>BOOK_READER_SPEED</code> <code>format</code> Audio format (mp3, wav) \"mp3\" <code>BOOK_READER_FORMAT</code>"},{"location":"configuration/#available-voices","title":"Available Voices","text":"<p>OpenAI's TTS API offers several voice options:</p> Voice Description <code>alloy</code> Neutral voice with balanced tone <code>echo</code> Versatile voice with clear, assertive delivery <code>fable</code> Expressive voice with a warmer tone <code>nova</code> Gentle and calm voice (default) <code>onyx</code> Deep and authoritative voice <code>shimmer</code> Light, conversational tone"},{"location":"configuration/#available-models","title":"Available Models","text":"Model Description <code>tts-1</code> Standard quality, faster processing (default) <code>tts-1-hd</code> Higher audio quality, larger file size"},{"location":"configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/#logging-configuration","title":"Logging Configuration","text":"<p>You can control the logging verbosity:</p> <pre><code># In config.yaml\nlog_level: \"debug\"  # Options: debug, info, warning, error\nlog_file: \"~/book-reader.log\"  # Optional: Log to file\n</code></pre> <p>Or via environment variable:</p> <pre><code>export BOOK_READER_LOG_LEVEL=debug\n</code></pre> <p>Or via command line:</p> <pre><code>book-reader convert document.pdf --verbose  # Increases log level\n</code></pre>"},{"location":"configuration/#progress-bar-configuration","title":"Progress Bar Configuration","text":"<p>You can disable the progress bar:</p> <pre><code># In config.yaml\ndisable_progress_bar: true\n</code></pre> <p>Or via environment variable:</p> <pre><code>export BOOK_READER_DISABLE_PROGRESS=true\n</code></pre> <p>Or via command line:</p> <pre><code>book-reader convert document.pdf --no-progress\n</code></pre>"},{"location":"configuration/#api-configuration","title":"API Configuration","text":"<p>Book Reader requires an OpenAI API key with access to the TTS API:</p> <pre><code># In config.yaml\nopenai_api_key: \"your-api-key-here\"\n</code></pre> <p>Or via environment variable (recommended):</p> <pre><code>export OPENAI_API_KEY=\"your-api-key-here\"\n</code></pre>"},{"location":"configuration/#configuration-for-docker","title":"Configuration for Docker","text":"<p>When using Docker, you can pass environment variables and mount a configuration file:</p> <pre><code>docker run --rm \\\n  -v $(pwd)/my-pdfs:/pdfs \\\n  -v $(pwd)/my-output:/output \\\n  -v $(pwd)/config.yaml:/app/config.yaml \\\n  -e OPENAI_API_KEY=\"your-api-key-here\" \\\n  -e BOOK_READER_CONCURRENT_TASKS=4 \\\n  juanfkurucz/book-reader:latest \\\n  convert /pdfs/document.pdf --output-dir /output\n</code></pre>"},{"location":"configuration/#configuration-precedence-example","title":"Configuration Precedence Example","text":"<p>If you set the same option in multiple places, here's how precedence works:</p> <ol> <li>Command-line: <code>--voice echo</code></li> <li>Environment variable: <code>BOOK_READER_VOICE=nova</code></li> <li>Config file: <code>audio: { voice: \"alloy\" }</code></li> <li>Default value: <code>\"nova\"</code></li> </ol> <p>In this example, <code>echo</code> would be used because command-line arguments have the highest priority.</p>"},{"location":"configuration/#tips-for-configuration","title":"Tips for Configuration","text":"<ol> <li>Use a config file for settings that remain constant between runs</li> <li>Use environment variables for sensitive information like API keys</li> <li>Use command-line arguments for one-off changes or specific conversion needs</li> <li>Start with default values and adjust based on your experience</li> </ol>"},{"location":"configuration/#debugging-configuration","title":"Debugging Configuration","text":"<p>To see what configuration is being used:</p> <pre><code>book-reader config show\n</code></pre> <p>This displays the effective configuration after merging all sources.</p>"},{"location":"contributing/","title":"Contributing to Book Reader","text":"<p>Thank you for your interest in contributing to Book Reader! This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Fork the repository: Start by forking the Book Reader repository on GitHub.</p> </li> <li> <p>Clone your fork:    <pre><code>git clone https://github.com/your-username/book-reader.git\ncd book-reader\n</code></pre></p> </li> <li> <p>Set up the development environment:    <pre><code># Create a virtual environment\npython -m venv venv\n\n# Activate the virtual environment\n# On Windows:\nvenv\\Scripts\\activate\n# On macOS/Linux:\nsource venv/bin/activate\n\n# Install dependencies\npip install -e \".[dev]\"\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a feature branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes: Implement your feature or bug fix.</p> </li> <li> <p>Run tests: Ensure your changes pass all tests.    <pre><code>pytest\n</code></pre></p> </li> <li> <p>Check code quality: Run the linters to ensure your code follows our style guidelines.    <pre><code>flake8\n</code></pre></p> </li> <li> <p>Commit your changes:    <pre><code>git commit -m \"Description of your changes\"\n</code></pre></p> </li> <li> <p>Push to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a pull request: Submit a pull request from your forked repository to the main Book Reader repository.</p> </li> </ol>"},{"location":"contributing/#code-guidelines","title":"Code Guidelines","text":"<ul> <li>Follow PEP 8 style guide</li> <li>Write docstrings for all functions, classes, and methods</li> <li>Add type annotations to function signatures</li> <li>Keep lines under 79 characters</li> <li>Use meaningful variable and function names</li> </ul>"},{"location":"contributing/#adding-features","title":"Adding Features","text":"<p>If you're adding a new feature:</p> <ol> <li>Start by opening an issue describing the feature</li> <li>Write tests for your feature</li> <li>Implement your feature</li> <li>Update the documentation</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>When adding or changing features, please update the corresponding documentation:</p> <ol> <li>Update or add docstrings</li> <li>Update the relevant files in the <code>docs/</code> directory</li> <li>If you've added new commands or options, update the usage guide</li> </ol> <p>To view your documentation changes locally: <pre><code>mkdocs serve\n</code></pre></p> <p>Then visit <code>http://127.0.0.1:8000</code> in your browser.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write unit tests for new functionality</li> <li>Make sure existing tests continue to pass</li> <li>Integration tests should be added for significant features</li> </ul>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md or documentation with details of changes if appropriate</li> <li>Update the CHANGELOG.md with a description of your changes</li> <li>The PR should work on the main branch and pass all CI checks</li> <li>The PR will be merged once it receives approval from maintainers</li> </ol>"},{"location":"contributing/#community","title":"Community","text":"<ul> <li>Be respectful and inclusive in your communications</li> <li>Help others who have questions</li> <li>Share your ideas and feedback</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Book Reader, you agree that your contributions will be licensed under the project's MIT License.</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide provides instructions for installing and setting up Book Reader on your system.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Book Reader, ensure you have the following:</p> <ul> <li>Python 3.13.3 or higher</li> <li>pip (Python package installer)</li> <li>An OpenAI API key with access to the TTS API</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":"<p>Book Reader can be installed in several ways:</p> <ol> <li>Using pip (recommended for most users)</li> <li>From source (for developers or latest features)</li> <li>Using Docker (for containerized deployment)</li> </ol>"},{"location":"installation/#using-pip","title":"Using pip","text":"<p>The simplest way to install Book Reader is via pip:</p> <pre><code>pip install book-reader\n</code></pre> <p>To install a specific version:</p> <pre><code>pip install book-reader==1.2.0\n</code></pre> <p>To upgrade to the latest version:</p> <pre><code>pip install --upgrade book-reader\n</code></pre>"},{"location":"installation/#from-source","title":"From Source","text":"<p>For the latest development version or to contribute to Book Reader:</p> <pre><code># Clone the repository\ngit clone https://github.com/juanfkurucz/book-reader.git\ncd book-reader\n\n# Install in development mode\npip install -e .\n</code></pre> <p>This creates an editable installation, where changes to the source code will be immediately available without reinstalling.</p>"},{"location":"installation/#using-docker","title":"Using Docker","text":"<p>Book Reader is available as a Docker image, which is useful for isolated environments or deployment:</p> <pre><code># Pull the latest image\ndocker pull juanfkurucz/book-reader:latest\n\n# Test the installation\ndocker run --rm juanfkurucz/book-reader:latest --help\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, verify that Book Reader is correctly installed:</p> <pre><code>book-reader --version\n</code></pre> <p>You should see the current version number of Book Reader displayed.</p>"},{"location":"installation/#setting-up-your-api-key","title":"Setting Up Your API Key","text":"<p>Book Reader requires an OpenAI API key to function. You can set it in several ways:</p> <ol> <li> <p>Environment variable (recommended):    <pre><code>export OPENAI_API_KEY=\"your-api-key-here\"\n</code></pre></p> </li> <li> <p>Configuration file:    Create a <code>config.yaml</code> file in your home directory or current working directory:    <pre><code>openai_api_key: \"your-api-key-here\"\n</code></pre></p> </li> <li> <p>Command line (not recommended for security reasons):    <pre><code>book-reader --api-key \"your-api-key-here\" convert document.pdf\n</code></pre></p> </li> </ol>"},{"location":"installation/#installation-options","title":"Installation Options","text":""},{"location":"installation/#virtual-environment","title":"Virtual Environment","text":"<p>It's recommended to install Book Reader within a virtual environment to avoid dependency conflicts:</p> <pre><code># Create a virtual environment\npython -m venv book-reader-env\n\n# Activate the virtual environment\n# On Windows:\nbook-reader-env\\Scripts\\activate\n# On macOS/Linux:\nsource book-reader-env/bin/activate\n\n# Install Book Reader\npip install book-reader\n</code></pre>"},{"location":"installation/#installing-optional-dependencies","title":"Installing Optional Dependencies","text":"<p>Book Reader has optional dependencies for enhanced functionality:</p> <pre><code># Install with all optional dependencies\npip install book-reader[all]\n\n# Install with specific optional dependencies\npip install book-reader[dev]  # Development tools\npip install book-reader[test]  # Testing tools\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-installation-issues","title":"Common Installation Issues","text":"<ol> <li> <p>Dependency Conflicts:    <pre><code>pip install --upgrade pip\npip install book-reader --force-reinstall\n</code></pre></p> </li> <li> <p>Permission Issues:    <pre><code>pip install --user book-reader\n</code></pre></p> </li> <li> <p>OpenAI API Key Not Found:    Ensure your API key is correctly set as an environment variable or in the configuration file.</p> </li> <li> <p>Module Not Found Errors:    <pre><code>pip install book-reader[all]\n</code></pre></p> </li> <li> <p>Docker Permission Issues:    <pre><code># On Linux, if you get permission errors:\nsudo docker pull juanfkurucz/book-reader:latest\nsudo docker run --rm juanfkurucz/book-reader:latest --help\n</code></pre></p> </li> </ol>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues not covered here:</p> <ul> <li>Check the GitHub Issues for similar problems</li> <li>Create a new issue with details about your problem</li> <li>Join our community Discord for real-time help</li> </ul>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation:</p> <ol> <li>Set up your configuration file following the Configuration Guide</li> <li>Try converting your first PDF to audiobook following the Usage Guide</li> <li>Explore the API Documentation if you're a developer</li> </ol>"},{"location":"installation/#upgrading","title":"Upgrading","text":"<p>To upgrade Book Reader to the latest version:</p> <pre><code>pip install --upgrade book-reader\n</code></pre> <p>For Docker:</p> <pre><code>docker pull juanfkurucz/book-reader:latest\n</code></pre>"},{"location":"installation/#uninstallation","title":"Uninstallation","text":"<p>If you need to uninstall Book Reader:</p> <pre><code>pip uninstall book-reader\n</code></pre> <p>For Docker, you can remove the image:</p> <pre><code>docker rmi juanfkurucz/book-reader:latest\n</code></pre>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how to use Book Reader to convert PDF documents to audiobooks.</p>"},{"location":"usage/#basic-commands","title":"Basic Commands","text":""},{"location":"usage/#converting-a-pdf-to-audio","title":"Converting a PDF to Audio","text":"<p>To convert a PDF document to an audiobook:</p> <pre><code>book-reader convert path/to/your/document.pdf\n</code></pre> <p>By default, this will create audio files in a directory named after your PDF in the current working directory.</p>"},{"location":"usage/#specifying-an-output-directory","title":"Specifying an Output Directory","text":"<p>To specify where the audio files should be saved:</p> <pre><code>book-reader convert path/to/your/document.pdf --output-dir /path/to/output\n</code></pre>"},{"location":"usage/#setting-audio-quality-and-voice","title":"Setting Audio Quality and Voice","text":"<p>You can customize the text-to-speech conversion:</p> <pre><code>book-reader convert path/to/your/document.pdf --voice nova --model tts-1-hd\n</code></pre> <p>Available voices include: - <code>alloy</code> - <code>echo</code> - <code>fable</code> - <code>nova</code> (default) - <code>onyx</code> - <code>shimmer</code></p> <p>Models include: - <code>tts-1</code> (default, faster processing) - <code>tts-1-hd</code> (higher quality audio)</p>"},{"location":"usage/#setting-playback-speed","title":"Setting Playback Speed","text":"<p>Adjust the speaking speed:</p> <pre><code>book-reader convert path/to/your/document.pdf --speed 1.2\n</code></pre> <p>Values range from 0.5 (slower) to 2.0 (faster), with 1.0 being the default.</p>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/#processing-specific-pages","title":"Processing Specific Pages","text":"<p>To process only specific pages:</p> <pre><code>book-reader convert path/to/your/document.pdf --pages 10-20\n</code></pre>"},{"location":"usage/#resuming-a-conversion","title":"Resuming a Conversion","text":"<p>If a conversion was interrupted, you can resume from where it left off:</p> <pre><code>book-reader convert path/to/your/document.pdf --resume\n</code></pre>"},{"location":"usage/#batch-processing","title":"Batch Processing","text":"<p>Control how many pages are processed in a single batch:</p> <pre><code>book-reader convert path/to/your/document.pdf --batch-size 10\n</code></pre>"},{"location":"usage/#concurrent-processing","title":"Concurrent Processing","text":"<p>Control the number of parallel processing tasks:</p> <pre><code>book-reader convert path/to/your/document.pdf --concurrent-tasks 4\n</code></pre>"},{"location":"usage/#combining-multiple-options","title":"Combining Multiple Options","text":"<p>You can combine multiple options:</p> <pre><code>book-reader convert path/to/your/document.pdf \\\n  --output-dir ~/audiobooks/my-book \\\n  --voice onyx \\\n  --model tts-1-hd \\\n  --speed 1.1 \\\n  --batch-size 15 \\\n  --concurrent-tasks 3\n</code></pre>"},{"location":"usage/#using-with-docker","title":"Using with Docker","text":"<p>If you're using the Docker image:</p> <pre><code>docker run --rm \\\n  -v $(pwd)/my-pdfs:/pdfs \\\n  -v $(pwd)/my-output:/output \\\n  -e OPENAI_API_KEY=\"your-api-key-here\" \\\n  juanfkurucz/book-reader:latest \\\n  convert /pdfs/document.pdf --output-dir /output\n</code></pre>"},{"location":"usage/#configuration-file","title":"Configuration File","text":"<p>Instead of specifying options on the command line, you can create a configuration file. Book Reader looks for <code>config.yaml</code> in these locations:</p> <ol> <li>Current working directory</li> <li>User's home directory in <code>~/.config/book-reader/config.yaml</code></li> </ol> <p>Example <code>config.yaml</code>:</p> <pre><code># Default conversion settings\ndefault_output_dir: \"~/audiobooks\"\nbatch_size: 15\nconcurrent_tasks: 2\n\n# Audio settings\naudio:\n  voice: \"nova\"\n  model: \"tts-1\"\n  speed: 1.0\n  format: \"mp3\"\n\n# API settings\nopenai_api_key: \"your-api-key-here\"\n</code></pre>"},{"location":"usage/#viewing-conversion-progress","title":"Viewing Conversion Progress","text":"<p>The conversion progress is displayed in real-time on the command line:</p> <pre><code>Converting \"mybook.pdf\" to audiobook...\nPages: 6/120 [===&gt;                   ] 5% | ETA: 55m20s\n</code></pre>"},{"location":"usage/#managing-existing-conversions","title":"Managing Existing Conversions","text":""},{"location":"usage/#list-converted-books","title":"List Converted Books","text":"<p>To see all previously converted books:</p> <pre><code>book-reader list\n</code></pre>"},{"location":"usage/#getting-book-information","title":"Getting Book Information","text":"<p>To get detailed information about a specific conversion:</p> <pre><code>book-reader info path/to/output/directory\n</code></pre>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/#logging","title":"Logging","text":"<p>To enable verbose logging for debugging:</p> <pre><code>book-reader convert path/to/document.pdf --verbose\n</code></pre> <p>For even more detailed logs:</p> <pre><code>book-reader convert path/to/document.pdf --log-level debug\n</code></pre>"},{"location":"usage/#common-issues","title":"Common Issues","text":"<ul> <li>API Key Issues: Ensure your OpenAI API key is set correctly and has access to the TTS API.</li> <li>Memory Issues: If you encounter memory errors, try reducing the <code>batch_size</code> and <code>concurrent_tasks</code> values.</li> <li>PDF Reading Issues: Some PDFs with complex formatting may not convert properly. Try extracting the text to a plain text file first if possible.</li> <li>Unicode or Special Character Issues: If your PDF contains special characters that don't convert properly, try using the <code>--preprocessing</code> flag to apply text cleanup.</li> </ul>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#converting-a-technical-book-with-high-quality","title":"Converting a Technical Book with High Quality","text":"<pre><code>book-reader convert programming_book.pdf \\\n  --model tts-1-hd \\\n  --voice onyx \\\n  --speed 0.9 \\\n  --output-dir ~/audiobooks/programming\n</code></pre>"},{"location":"usage/#quick-conversion-of-a-novel","title":"Quick Conversion of a Novel","text":"<pre><code>book-reader convert novel.pdf \\\n  --model tts-1 \\\n  --voice nova \\\n  --speed 1.1\n</code></pre>"},{"location":"usage/#converting-a-large-document-in-sections","title":"Converting a Large Document in Sections","text":"<pre><code># Process the first 50 pages\nbook-reader convert large_document.pdf --pages 1-50\n\n# Process the next 50 pages\nbook-reader convert large_document.pdf --pages 51-100\n\n# Process the final 50 pages\nbook-reader convert large_document.pdf --pages 101-150\n</code></pre>"},{"location":"usage/#using-a-configuration-file-with-command-overrides","title":"Using a Configuration File with Command Overrides","text":"<p>Create a <code>config.yaml</code> with your preferred defaults, then override specific settings as needed:</p> <pre><code>book-reader convert document.pdf --voice shimmer\n</code></pre> <p>This uses all other settings from your configuration file but changes the voice to \"shimmer\".</p>"},{"location":"usage/#command-reference","title":"Command Reference","text":""},{"location":"usage/#main-commands","title":"Main Commands","text":"Command Description <code>convert</code> Convert a PDF to audiobook <code>list</code> List all converted books <code>info</code> Show details about a conversion <code>config</code> Manage configuration settings <code>version</code> Show version information <code>help</code> Show help for commands"},{"location":"usage/#convert-command-options","title":"Convert Command Options","text":"Option Description Default <code>--output-dir</code> Directory to save audio files Current directory <code>--voice</code> Voice for TTS \"nova\" <code>--model</code> TTS model \"tts-1\" <code>--speed</code> Playback speed 1.0 <code>--batch-size</code> Pages per batch 15 <code>--concurrent-tasks</code> Parallel processes 2 <code>--resume</code> Resume interrupted conversion False <code>--pages</code> Page range to process All pages <code>--verbose</code> Enable verbose logging False <code>--log-level</code> Set logging level \"info\" <code>--no-progress</code> Disable progress bar False <code>--format</code> Audio format \"mp3\""},{"location":"usage/#best-practices","title":"Best Practices","text":"<ol> <li>Begin with a small batch: Try converting a few pages first to verify voice/quality before processing a large document.</li> <li>Use appropriate batching: For large books, use appropriate batching to avoid memory issues.</li> <li>Secure your API key: Never commit your API key to version control or share it publicly.</li> <li>Configure for your use case: Technical books may benefit from slower speeds, while fiction might be enjoyable at normal or faster speeds.</li> <li>Enable resumption: When converting large documents, always use the <code>--resume</code> flag to handle potential interruptions.</li> </ol>"},{"location":"api/","title":"API Reference","text":"<p>This section provides detailed documentation for Book Reader's Python API. If you want to integrate Book Reader into your own Python applications, these pages will help you understand the available components and how to use them.</p>"},{"location":"api/#module-structure","title":"Module Structure","text":"<p>Book Reader is organized into several modules:</p> <ul> <li>models: Data structures used throughout the application</li> <li>repositories: Components that handle data access and storage</li> <li>services: Core business logic and processing components</li> <li>utils: Helper functions and utilities</li> </ul>"},{"location":"api/#getting-started-with-the-api","title":"Getting Started with the API","text":"<p>To use Book Reader in your own Python scripts:</p> <pre><code>from book_reader.services.conversion_service import ConversionService\nfrom book_reader.repositories.pdf_repository import PDFRepository\nfrom book_reader.models.audio_config import AudioConfig\n\n# Initialize the repository\npdf_repo = PDFRepository()\n\n# Find a PDF document\npdf_document = pdf_repo.find_by_filename(\"path/to/your/document.pdf\")\n\n# Configure audio settings\naudio_config = AudioConfig(\n    voice=\"nova\",\n    model=\"tts-1-hd\",\n    speed=1.0,\n    format=\"mp3\"\n)\n\n# Initialize the conversion service\nconversion_service = ConversionService(\n    openai_api_key=\"your-api-key-here\",\n    pdf_repository=pdf_repo\n)\n\n# Convert the PDF to audiobook\nconversion_service.convert_pdf_to_audiobook(\n    pdf_document=pdf_document,\n    output_dir=\"path/to/output\",\n    audio_config=audio_config,\n    batch_size=15,\n    resume=False,\n    max_pages=None\n)\n</code></pre>"},{"location":"api/#key-components","title":"Key Components","text":""},{"location":"api/#conversionservice","title":"ConversionService","text":"<p>The <code>ConversionService</code> is the main entry point for the API. It handles the process of converting a PDF document to audio files:</p> <pre><code>from book_reader.services.conversion_service import ConversionService\n\nconversion_service = ConversionService(\n    openai_api_key=\"your-api-key-here\",\n    pdf_repository=pdf_repo,\n    tts_service=tts_service  # Optional\n)\n</code></pre>"},{"location":"api/#pdfrepository","title":"PDFRepository","text":"<p>The <code>PDFRepository</code> handles PDF document operations:</p> <pre><code>from book_reader.repositories.pdf_repository import PDFRepository\n\npdf_repo = PDFRepository()\npdf_document = pdf_repo.find_by_filename(\"path/to/your/document.pdf\")\npages = pdf_repo.load_pages(pdf_document, page_range=(1, 10))\n</code></pre>"},{"location":"api/#ttsservice","title":"TTSService","text":"<p>The <code>TTSService</code> interfaces with OpenAI's TTS API:</p> <pre><code>from book_reader.services.tts_service import TTSService\nfrom book_reader.models.audio_config import AudioConfig\n\naudio_config = AudioConfig(voice=\"nova\", model=\"tts-1\")\ntts_service = TTSService(api_key=\"your-api-key-here\")\naudio_data = tts_service.convert_text_to_speech(\"Hello world\", audio_config)\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The API uses a custom exception hierarchy for error handling:</p> <pre><code>try:\n    conversion_service.convert_pdf_to_audiobook(...)\nexcept book_reader.exceptions.PDFReadError as e:\n    print(f\"Error reading PDF: {e}\")\nexcept book_reader.exceptions.TTSError as e:\n    print(f\"Error in text-to-speech conversion: {e}\")\nexcept book_reader.exceptions.BookReaderError as e:\n    print(f\"General error: {e}\")\n</code></pre>"},{"location":"api/#advanced-usage","title":"Advanced Usage","text":"<p>For advanced usage examples and detailed documentation of each component, please refer to the specific module documentation:</p> <ul> <li>Models Documentation</li> <li>Repositories Documentation</li> <li>Services Documentation</li> <li>Utils Documentation</li> </ul>"},{"location":"api/#extending-book-reader","title":"Extending Book Reader","text":"<p>Book Reader is designed to be extensible. You can create custom implementations of key interfaces:</p> <pre><code>from book_reader.repositories.base_repository import BasePDFRepository\n\nclass MyCustomPDFRepository(BasePDFRepository):\n    def find_by_filename(self, filename: str) -&gt; PDFDocument:\n        # Custom implementation\n        ...\n\n    def load_pages(self, document: PDFDocument, page_range: Optional[Tuple[int, int]] = None) -&gt; List[PDFPage]:\n        # Custom implementation\n        ...\n</code></pre>"},{"location":"api/#performance-considerations","title":"Performance Considerations","text":"<p>When working with large documents:</p> <ol> <li>Process pages in batches to manage memory usage</li> <li>Enable the resume functionality to handle interruptions</li> <li>Adjust concurrent tasks based on your system's capabilities</li> <li>Consider preprocessing steps for complex PDFs with challenging formatting</li> </ol>"},{"location":"api/models/","title":"Models","text":"<p>This page documents the data models used in the Book Reader application.</p>"},{"location":"api/models/#audioconfig","title":"AudioConfig","text":"<pre><code>class AudioConfig:\n    \"\"\"Configuration for audio conversion.\n\n    Attributes:\n        voice: The voice to use for TTS (\"alloy\", \"echo\", \"fable\", \"nova\", \"onyx\", \"shimmer\")\n        model: The TTS model to use (\"tts-1\", \"tts-1-hd\")\n        speed: The speed factor for audio playback (0.5 to 2.0)\n        format: The audio format (\"mp3\", \"wav\")\n    \"\"\"\n</code></pre>"},{"location":"api/models/#pdfdocument","title":"PDFDocument","text":"<pre><code>class PDFDocument:\n    \"\"\"Represents a PDF document.\n\n    Attributes:\n        path: Path to the PDF file\n        filename: Filename of the PDF\n        metadata: Dictionary containing document metadata\n    \"\"\"\n</code></pre>"},{"location":"api/models/#pdfpage","title":"PDFPage","text":"<pre><code>class PDFPage:\n    \"\"\"Represents a page from a PDF document.\n\n    Attributes:\n        page_number: The page number (1-indexed)\n        content: The extracted text content of the page\n        document: Reference to the parent PDFDocument\n    \"\"\"\n</code></pre>"},{"location":"api/models/#conversionstatus","title":"ConversionStatus","text":"<pre><code>class ConversionStatus:\n    \"\"\"Tracks the status of a PDF to audiobook conversion.\n\n    Attributes:\n        total_pages: Total number of pages in the document\n        processed_pages: Number of pages that have been processed\n        current_batch: Current batch being processed\n        start_time: When the conversion started\n        completed_chunks: List of completed chunk files\n    \"\"\"\n</code></pre>"},{"location":"api/models/#conversionresult","title":"ConversionResult","text":"<pre><code>class ConversionResult:\n    \"\"\"Results of a PDF to audiobook conversion.\n\n    Attributes:\n        document: The PDF document that was converted\n        output_files: List of generated audio files\n        duration_seconds: Total duration of the audiobook in seconds\n        total_pages: Total number of pages processed\n        audio_config: The audio configuration used\n    \"\"\"\n</code></pre>"},{"location":"api/models/#textchunk","title":"TextChunk","text":"<pre><code>class TextChunk:\n    \"\"\"A chunk of text to be processed by the TTS service.\n\n    Attributes:\n        content: The text content\n        chunk_id: Unique identifier for the chunk\n        page_numbers: List of page numbers contained in this chunk\n        output_path: Path where the resulting audio will be saved\n    \"\"\"\n</code></pre> <p>For complete implementation details of these models, please refer to the source code.</p>"},{"location":"api/repositories/","title":"Repositories","text":"<p>This page documents the repository classes used in Book Reader for data access.</p>"},{"location":"api/repositories/#pdfrepository","title":"PDFRepository","text":"<p>The <code>PDFRepository</code> class is responsible for finding, loading, and extracting text from PDF documents.</p> <pre><code>class PDFRepository:\n    \"\"\"Repository for PDF document operations.\"\"\"\n\n    def find_all_pdfs(self, directory: str) -&gt; List[PDFDocument]:\n        \"\"\"Find all PDF files in the specified directory.\n\n        Args:\n            directory: Directory path to search for PDFs\n\n        Returns:\n            List of PDFDocument objects\n        \"\"\"\n\n    def find_by_filename(self, filename: str) -&gt; PDFDocument:\n        \"\"\"Find a PDF document by its filename.\n\n        Args:\n            filename: Path to the PDF file\n\n        Returns:\n            PDFDocument object\n\n        Raises:\n            FileNotFoundError: If the file doesn't exist or isn't a PDF\n        \"\"\"\n\n    def load_pages(self, document: PDFDocument, page_range: Optional[Tuple[int, int]] = None) -&gt; List[PDFPage]:\n        \"\"\"Load pages from a PDF document.\n\n        Args:\n            document: PDFDocument to load pages from\n            page_range: Optional tuple of (start_page, end_page) to load a subset of pages\n\n        Returns:\n            List of PDFPage objects\n\n        Raises:\n            PDFReadError: If there's an error reading the PDF\n        \"\"\"\n</code></pre>"},{"location":"api/repositories/#audiorepository","title":"AudioRepository","text":"<p>The <code>AudioRepository</code> class handles storage and retrieval of audio files.</p> <pre><code>class AudioRepository:\n    \"\"\"Repository for audio file operations.\"\"\"\n\n    def save_audio(self, audio_data: bytes, output_path: str) -&gt; None:\n        \"\"\"Save audio data to a file.\n\n        Args:\n            audio_data: The binary audio data\n            output_path: Path where the audio file should be saved\n\n        Raises:\n            IOError: If there's an error writing the file\n        \"\"\"\n\n    def get_audio_duration(self, file_path: str) -&gt; float:\n        \"\"\"Get the duration of an audio file in seconds.\n\n        Args:\n            file_path: Path to the audio file\n\n        Returns:\n            Duration in seconds\n\n        Raises:\n            IOError: If there's an error reading the file\n        \"\"\"\n</code></pre>"},{"location":"api/repositories/#progressrepository","title":"ProgressRepository","text":"<p>The <code>ProgressRepository</code> class handles saving and loading conversion progress.</p> <pre><code>class ProgressRepository:\n    \"\"\"Repository for managing conversion progress.\"\"\"\n\n    def save_progress(self, conversion_id: str, status: ConversionStatus) -&gt; None:\n        \"\"\"Save the current progress of a conversion.\n\n        Args:\n            conversion_id: Unique identifier for the conversion\n            status: Current status of the conversion\n        \"\"\"\n\n    def load_progress(self, conversion_id: str) -&gt; Optional[ConversionStatus]:\n        \"\"\"Load the progress of a conversion.\n\n        Args:\n            conversion_id: Unique identifier for the conversion\n\n        Returns:\n            ConversionStatus object if progress exists, None otherwise\n        \"\"\"\n</code></pre>"},{"location":"api/repositories/#base-interfaces","title":"Base Interfaces","text":"<p>Book Reader uses interfaces (abstract base classes) to define the contract for repositories:</p> <pre><code>class BasePDFRepository(ABC):\n    \"\"\"Base interface for PDF repositories.\"\"\"\n\n    @abstractmethod\n    def find_by_filename(self, filename: str) -&gt; PDFDocument:\n        \"\"\"Find a PDF document by its filename.\"\"\"\n        pass\n\n    @abstractmethod\n    def load_pages(self, document: PDFDocument, page_range: Optional[Tuple[int, int]] = None) -&gt; List[PDFPage]:\n        \"\"\"Load pages from a PDF document.\"\"\"\n        pass\n</code></pre> <p>For complete implementation details of these repositories, please refer to the source code.</p>"},{"location":"api/services/","title":"Services","text":"<p>This page documents the service classes used in Book Reader for business logic operations.</p>"},{"location":"api/services/#conversionservice","title":"ConversionService","text":"<p>The <code>ConversionService</code> is the main service that handles the conversion of PDF documents to audiobooks.</p> <pre><code>class ConversionService:\n    \"\"\"Service for converting PDF documents to audiobooks.\"\"\"\n\n    def __init__(\n        self,\n        openai_api_key: str,\n        pdf_repository: BasePDFRepository,\n        tts_service: Optional[BaseTTSService] = None\n    ):\n        \"\"\"Initialize the conversion service.\n\n        Args:\n            openai_api_key: OpenAI API key for TTS\n            pdf_repository: Repository for PDF operations\n            tts_service: Optional TTS service (will be created if not provided)\n        \"\"\"\n\n    def convert_pdf_to_audiobook(\n        self,\n        pdf_document: PDFDocument,\n        output_dir: str,\n        audio_config: AudioConfig,\n        batch_size: int = 15,\n        resume: bool = False,\n        max_pages: Optional[int] = None\n    ) -&gt; ConversionResult:\n        \"\"\"Convert a PDF document to audiobook.\n\n        Args:\n            pdf_document: The PDF document to convert\n            output_dir: Directory to save the audio files\n            audio_config: Configuration for the audio conversion\n            batch_size: Number of pages to process in a batch\n            resume: Whether to resume a previous conversion\n            max_pages: Maximum number of pages to process\n\n        Returns:\n            ConversionResult containing details about the conversion\n\n        Raises:\n            PDFReadError: If there's an error reading the PDF\n            TTSError: If there's an error with the TTS service\n            IOError: If there's an error writing the audio files\n        \"\"\"\n</code></pre>"},{"location":"api/services/#ttsservice","title":"TTSService","text":"<p>The <code>TTSService</code> interfaces with OpenAI's Text-to-Speech API.</p> <pre><code>class TTSService:\n    \"\"\"Service for text-to-speech conversion using OpenAI's API.\"\"\"\n\n    def __init__(self, api_key: str):\n        \"\"\"Initialize the TTS service.\n\n        Args:\n            api_key: OpenAI API key\n        \"\"\"\n\n    def convert_text_to_speech(\n        self,\n        text: str,\n        audio_config: AudioConfig,\n        output_path: Optional[str] = None\n    ) -&gt; bytes:\n        \"\"\"Convert text to speech.\n\n        Args:\n            text: The text to convert to speech\n            audio_config: Configuration for the audio conversion\n            output_path: Optional path to save the audio file\n\n        Returns:\n            Binary audio data\n\n        Raises:\n            TTSError: If there's an error with the TTS service\n            IOError: If there's an error writing the audio file\n        \"\"\"\n</code></pre>"},{"location":"api/services/#textprocessingservice","title":"TextProcessingService","text":"<p>The <code>TextProcessingService</code> handles text preprocessing before sending it to the TTS service.</p> <pre><code>class TextProcessingService:\n    \"\"\"Service for text preprocessing and optimization.\"\"\"\n\n    def preprocess_text(self, text: str) -&gt; str:\n        \"\"\"Preprocess text for optimal TTS conversion.\n\n        Args:\n            text: The text to preprocess\n\n        Returns:\n            Preprocessed text\n        \"\"\"\n\n    def split_into_chunks(\n        self,\n        pages: List[PDFPage],\n        max_chunk_size: int = 4000\n    ) -&gt; List[TextChunk]:\n        \"\"\"Split pages into manageable text chunks.\n\n        Args:\n            pages: List of PDF pages\n            max_chunk_size: Maximum size of each chunk in characters\n\n        Returns:\n            List of TextChunk objects\n        \"\"\"\n</code></pre>"},{"location":"api/services/#base-interfaces","title":"Base Interfaces","text":"<p>Book Reader uses interfaces (abstract base classes) to define the contract for services:</p> <pre><code>class BaseTTSService(ABC):\n    \"\"\"Base interface for TTS services.\"\"\"\n\n    @abstractmethod\n    def convert_text_to_speech(\n        self,\n        text: str,\n        audio_config: AudioConfig,\n        output_path: Optional[str] = None\n    ) -&gt; bytes:\n        \"\"\"Convert text to speech.\"\"\"\n        pass\n</code></pre> <p>For complete implementation details of these services, please refer to the source code.</p>"},{"location":"api/utils/","title":"Utilities","text":"<p>This page documents the utility functions and helpers used in Book Reader.</p>"},{"location":"api/utils/#configuration-utilities","title":"Configuration Utilities","text":"<pre><code>def load_config(config_path: Optional[str] = None) -&gt; Dict[str, Any]:\n    \"\"\"Load configuration from a YAML file.\n\n    Args:\n        config_path: Optional path to the configuration file\n\n    Returns:\n        Dictionary containing configuration values\n\n    Raises:\n        ConfigError: If there's an error loading the configuration\n    \"\"\"\n\ndef get_config_value(\n    key: str,\n    default: Any = None,\n    config: Optional[Dict[str, Any]] = None\n) -&gt; Any:\n    \"\"\"Get a configuration value with fallback to environment variables and defaults.\n\n    Args:\n        key: Configuration key\n        default: Default value to use if key is not found\n        config: Optional configuration dictionary\n\n    Returns:\n        Configuration value\n    \"\"\"\n</code></pre>"},{"location":"api/utils/#file-system-utilities","title":"File System Utilities","text":"<pre><code>def ensure_directory_exists(directory: str) -&gt; None:\n    \"\"\"Ensure that a directory exists, creating it if necessary.\n\n    Args:\n        directory: Directory path\n\n    Raises:\n        IOError: If the directory cannot be created\n    \"\"\"\n\ndef is_pdf_file(filepath: str) -&gt; bool:\n    \"\"\"Check if a file is a PDF.\n\n    Args:\n        filepath: Path to the file\n\n    Returns:\n        True if the file is a PDF, False otherwise\n    \"\"\"\n\ndef get_filename_without_extension(filepath: str) -&gt; str:\n    \"\"\"Get the filename without extension from a filepath.\n\n    Args:\n        filepath: Path to the file\n\n    Returns:\n        Filename without extension\n    \"\"\"\n</code></pre>"},{"location":"api/utils/#text-processing-utilities","title":"Text Processing Utilities","text":"<pre><code>def clean_text(text: str) -&gt; str:\n    \"\"\"Clean and normalize text for TTS processing.\n\n    Args:\n        text: Text to clean\n\n    Returns:\n        Cleaned text\n    \"\"\"\n\ndef split_text_into_sentences(text: str) -&gt; List[str]:\n    \"\"\"Split text into sentences.\n\n    Args:\n        text: Text to split\n\n    Returns:\n        List of sentences\n    \"\"\"\n\ndef truncate_text(text: str, max_length: int = 4000) -&gt; str:\n    \"\"\"Truncate text to a maximum length while preserving sentence boundaries.\n\n    Args:\n        text: Text to truncate\n        max_length: Maximum length in characters\n\n    Returns:\n        Truncated text\n    \"\"\"\n</code></pre>"},{"location":"api/utils/#logging-utilities","title":"Logging Utilities","text":"<pre><code>def setup_logging(level: str = \"info\", log_file: Optional[str] = None) -&gt; None:\n    \"\"\"Set up logging for the application.\n\n    Args:\n        level: Logging level (\"debug\", \"info\", \"warning\", \"error\")\n        log_file: Optional path to log file\n    \"\"\"\n\ndef log_exception(exception: Exception, message: str = \"An error occurred\") -&gt; None:\n    \"\"\"Log an exception with a custom message.\n\n    Args:\n        exception: The exception to log\n        message: Custom message to include\n    \"\"\"\n</code></pre>"},{"location":"api/utils/#progress-utilities","title":"Progress Utilities","text":"<pre><code>def create_progress_bar(\n    total: int,\n    description: str = \"Processing\",\n    disable: bool = False\n) -&gt; Any:\n    \"\"\"Create a progress bar for tracking operations.\n\n    Args:\n        total: Total number of items\n        description: Description text for the progress bar\n        disable: Whether to disable the progress bar\n\n    Returns:\n        Progress bar object\n    \"\"\"\n\ndef update_progress_bar(\n    progress_bar: Any,\n    n: int = 1,\n    description: Optional[str] = None\n) -&gt; None:\n    \"\"\"Update a progress bar.\n\n    Args:\n        progress_bar: Progress bar object\n        n: Number of items to increment by\n        description: Optional new description text\n    \"\"\"\n</code></pre>"},{"location":"api/utils/#error-handling-utilities","title":"Error Handling Utilities","text":"<pre><code>def retry_operation(\n    operation: Callable,\n    max_retries: int = 3,\n    retry_delay: float = 1.0,\n    exceptions: Tuple[Type[Exception], ...] = (Exception,)\n) -&gt; Any:\n    \"\"\"Retry an operation with exponential backoff.\n\n    Args:\n        operation: Function to retry\n        max_retries: Maximum number of retry attempts\n        retry_delay: Initial delay between retries in seconds\n        exceptions: Tuple of exceptions to catch and retry\n\n    Returns:\n        Result of the operation\n\n    Raises:\n        The last exception if all retries fail\n    \"\"\"\n</code></pre> <p>For complete implementation details of these utilities, please refer to the source code.</p>"}]}